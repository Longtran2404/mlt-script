---
description: Universal Cursor Rules for Claude Sonnet 4.0 - All Projects
globs: "**/*.{ts,tsx,js,jsx,py,java,go,rs,php,rb,swift,kt,dart,vue,svelte,html,css,scss,json,yaml,yml,md,sql,sh}"
alwaysApply: true
---

# 🎯 Universal Claude Sonnet 4.0 Cursor Rules

## Core Principles for All Projects

### **🧠 Thinking Mode Instructions**
- **Think step-by-step** before coding - analyze requirements, edge cases, and optimal solutions
- **Consider multiple approaches** - evaluate pros/cons before implementation
- **Plan before coding** - outline the solution structure and data flow
- **Anticipate issues** - think about potential bugs, performance issues, and user experience
- **Self-review** - double-check logic, types, and best practices after writing code

### **⚡ Code Quality Imperatives**
- **TypeScript-first** - Strong typing, no `any` types unless absolutely necessary
- **Functional programming** - Prefer pure functions, immutability, and composition
- **Performance-conscious** - Optimize for bundle size, runtime performance, and user experience
- **Error-resilient** - Comprehensive error handling, validation, and graceful degradation
- **Self-documenting** - Clear naming, logical structure, minimal but meaningful comments

### **🔧 Language & Framework Specific Standards**

#### **Frontend (React/Vue/Angular/Svelte)**
- **Modern patterns** - Functional components, hooks, composition API
- **Performance optimization** - Memoization, lazy loading, code splitting
- **Accessibility first** - Semantic HTML, ARIA labels, keyboard navigation
- **Mobile-responsive** - Mobile-first design, proper breakpoints

#### **Backend (Node.js/Python/Java/Go/Rust)**
- **API design** - RESTful conventions, proper HTTP status codes
- **Database patterns** - Connection pooling, proper ORM usage, migrations
- **Security** - Input validation, authentication, authorization
- **Performance** - Caching, query optimization, async/await patterns

#### **Mobile (React Native/Flutter/Swift/Kotlin)**
- **Platform conventions** - Follow iOS/Android design guidelines
- **Performance** - Optimize for mobile constraints, battery usage
- **Navigation** - Use platform-appropriate navigation patterns
- **State management** - Context, Redux, MobX for complex apps

## 💡 Universal Code Examples for Claude Sonnet 4.0

### **✅ TypeScript/JavaScript (Frontend)**
```typescript
interface ApiResult<T> {
  success: boolean;
  data?: T;
  error?: string;
}

const fetchData = async <T>(url: string): Promise<ApiResult<T>> => {
  try {
    const response = await fetch(url, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json() as T;
    return { success: true, data };
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
};
```

### **✅ Python (Backend)**
```python
from typing import Optional, Dict, Any
import logging

class ApiResult:
    def __init__(self, success: bool, data: Optional[Any] = None, error: Optional[str] = None):
        self.success = success
        self.data = data
        self.error = error

async def create_user(user_data: Dict[str, Any]) -> ApiResult:
    try:
        # Validate input
        if not user_data.get('email') or not user_data.get('name'):
            return ApiResult(False, error="Email and name are required")
        
        # Process user creation
        result = await database.create_user(user_data)
        return ApiResult(True, data=result)
        
    except Exception as e:
        logging.error(f"User creation failed: {e}")
        return ApiResult(False, error=str(e))
```

### **✅ Go (Backend)**
```go
type ApiResult struct {
    Success bool        `json:"success"`
    Data    interface{} `json:"data,omitempty"`
    Error   string      `json:"error,omitempty"`
}

func CreateUser(userData map[string]interface{}) ApiResult {
    if userData["email"] == nil || userData["name"] == nil {
        return ApiResult{
            Success: false,
            Error:   "Email and name are required",
        }
    }
    
    result, err := database.CreateUser(userData)
    if err != nil {
        log.Printf("User creation failed: %v", err)
        return ApiResult{
            Success: false,
            Error:   err.Error(),
        }
    }
    
    return ApiResult{
        Success: true,
        Data:    result,
    }
}
```

### **❌ Universal Anti-patterns**
```typescript
// No error handling, poor typing
function getData(url) {
  fetch(url).then(response => response.json()).then(console.log);
}

// No validation, unclear logic
const processUser = (data: any) => {
  if (data.email) {
    return data;
  }
};
```

## 🚀 Universal Development Excellence

### **🧠 Enhanced Thinking Process**
- **Deep analysis first** - Analyze requirements, constraints, and optimal solutions
- **Architecture consideration** - Think about scalability, maintainability, and performance
- **Edge case identification** - Anticipate and handle edge cases proactively
- **Code review mindset** - Self-review code as if reviewing someone else's work
- **Cross-platform compatibility** - Consider different environments and platforms

### **⚡ Quality Requirements (All Languages)**
- **Strong typing** - Use type systems (TypeScript, Python type hints, Rust types, etc.)
- **Comprehensive error handling** - Every operation that can fail must handle errors
- **Performance optimization** - Memory usage, algorithmic efficiency, caching strategies
- **Security first** - Input validation, authentication, secure coding practices
- **Testing coverage** - Unit tests, integration tests, end-to-end tests

### **🔧 Universal Best Practices**
- **Consistent naming conventions** - Follow language-specific standards
- **Modular architecture** - Separation of concerns, single responsibility principle
- **Documentation** - Clear README, API docs, inline comments for complex logic
- **Version control** - Meaningful commits, proper branching strategy
- **Environment management** - Configuration management, secrets handling

## 🎯 Universal Development Workflow

### **Pre-deployment Checklist (adapt for your stack)**
```bash
# Frontend (React/Vue/Angular)
npm run build && npm run test && npm run lint

# Backend (Node.js)
npm run build && npm test && npm run lint

# Python
python -m pytest && python -m flake8 . && python -m mypy .

# Go  
go test ./... && go vet ./... && golint ./...

# Java
mvn clean test && mvn checkstyle:check

# Rust
cargo test && cargo clippy && cargo fmt --check
```

### **Universal Code Quality Standards**
- **No debug statements** in production (console.log, print(), fmt.Println(), etc.)
- **Strong typing** - Avoid `any`, `Object`, `interface{}`, dynamic types
- **Consistent naming** - Follow language conventions (camelCase, snake_case, PascalCase)
- **Error handling** - Handle all possible error conditions gracefully
- **Resource management** - Proper cleanup of connections, files, memory

### **Security & Best Practices (All Projects)**
- **Input validation** - Sanitize and validate all user inputs
- **Environment secrets** - Never hardcode API keys, passwords, tokens
- **Secure communications** - Use HTTPS/TLS for all external calls
- **Authentication/Authorization** - Verify permissions before sensitive operations
- **Logging** - Don't log sensitive data, use structured logging

## 📋 Universal Deployment & Monitoring

### **Build & Deployment**
- **Automated builds** - CI/CD pipelines for consistent deployments
- **Environment separation** - dev, staging, production configurations
- **Health checks** - Implement proper health/status endpoints
- **Rollback strategy** - Plan for quick rollbacks if issues arise

### **Monitoring & Observability**
- **Logging** - Structured logs with appropriate levels
- **Metrics** - Track performance, errors, and usage patterns  
- **Alerting** - Set up alerts for critical issues
- **Documentation** - Maintain deployment and runbook documentation

## 🎨 Universal UI/UX Principles

### **User Experience**
- **Responsive design** - Works on all screen sizes and devices
- **Loading states** - Show progress for long-running operations
- **Error states** - Clear, helpful error messages and recovery options
- **Accessibility** - Follow WCAG guidelines, keyboard navigation
- **Performance** - Optimize for fast load times and smooth interactions
